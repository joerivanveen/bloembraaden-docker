# For more information on configuration, see:
#   * Official English Documentation: http://nginx.org/en/docs/
#   * Official Russian Documentation: http://nginx.org/ru/docs/

user nginx;
worker_processes auto;
error_log /tmp/logs/_nginx.log;
pid /run/nginx.pid;

# Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.
include /usr/share/nginx/modules/*.conf;

events {
    worker_connections 1024;
}

http {

    ## enables GZIP compression ##
    gzip on;
    gzip_comp_level 4;
    gzip_min_length 1000;
    gzip_proxied any;
    gzip_disable "msie6";
    ## compress outputs labeled with the following MIME-types. ##
    ## do not add text/html as this is enabled by default. ##
    gzip_types
        application/atom+xml
        application/geo+json
        application/javascript
        application/x-javascript
        application/json
        application/ld+json
        application/manifest+json
        application/rdf+xml
        application/rss+xml
        application/xhtml+xml
        application/xml
        font/eot
        font/otf
        font/ttf
        image/svg+xml
        text/css
        text/javascript
        text/plain
        text/xml;



    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /tmp/logs/_access.log  main;

    sendfile            on;
    tcp_nopush          on;
    tcp_nodelay         on;
    keepalive_timeout   65;
    types_hash_max_size 2048;

    include             /etc/nginx/mime.types;
    default_type        application/octet-stream;

    # serve webp images to browsers that accept them
    map $http_accept $img_suffix {
        default   ".jpg";
        "~*webp"  ".webp";
    }

    # rate limiting
    limit_req_zone $binary_remote_addr zone=dynamic:5m rate=12r/s;
    limit_req_zone $binary_remote_addr zone=instance:5m rate=50r/s;
    limit_req_zone $binary_remote_addr zone=static:5m rate=100r/s;

    root /usr/share/nginx/htdocs;

    #
    # http server redirects all traffic to https
    #
    server {
        listen       80 default_server;
        listen       [::]:80 default_server;
        server_name  _;
        return 301 https://$host$request_uri;
    }

    #
    # Bloembraaden websites all over https:
    #
    server {
        listen       443 ssl http2 default_server;
        listen       [::]:443 ssl http2 default_server;
        server_name  _;

        client_max_body_size 200M;

        ssl_certificate "/etc/certificates/bloembraaden.local.crt";
        ssl_certificate_key "/etc/certificates/bloembraaden.local.key";
        include /etc/nginx/options-ssl-nginx.conf;
        ssl_dhparam /etc/certificates/ssl-dhparams.pem;

        # Load configuration files for the default server block.
        include /etc/nginx/bloembraaden.d/*.conf;
    }

    #
    # bloembraaden.io website with unlimited subdomains
    #
    server {
        listen       443 ssl http2;
        listen       [::]:443 ssl http2;
        server_name  bloembraaden.io  www.bloembraaden.io  *.bloembraaden.io;

        client_max_body_size 25M;

        ssl_certificate "/etc/certificates/bloembraaden.local.crt";
        ssl_certificate_key "/etc/certificates/bloembraaden.local.key";
        include /etc/nginx/options-ssl-nginx.conf; # managed by Certbot

        # Load configuration files for the default server block.
        include /etc/nginx/bloembraaden.d/*.conf;
    }

    #
    # Static files for Bloembraaden, no cookie domain
    #
    server {
        listen       443 ssl http2;
        listen       [::]:443 ssl http2;
        server_name  static.bloembraaden.local;
        root         /mnt/static/htdocs;
        index        noimage.svg;

        ssl_certificate "/etc/certificates/bloembraaden.local.crt";
        ssl_certificate_key "/etc/certificates/bloembraaden.local.key";
        include /etc/nginx/options-ssl-nginx.conf;
        ssl_dhparam /etc/certificates/ssl-dhparams.pem;

        expires 1y;
        add_header Cache-Control "public, no-transform";

        limit_req zone=static burst=200 nodelay;

        location ~ \.webp {
            if ($img_suffix = '.jpg') {
                rewrite ^/(.*)\.webp /$1.jpg;
                return 302 $uri;
            }
            try_files $uri /noimage.svg =404;
        }

        try_files $uri /noimage.svg =404;
    }
}

